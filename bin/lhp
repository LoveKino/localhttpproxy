#!/usr/bin/env node

const yargs = require('yargs');
const {
  exec
} = require('child_process');
const path = require('path');
const {
  net: {
    http: {
      request
    }
  }
} = require('general_lib');
const sendRequest = require('../src/send');

const log = console.log; // eslint-disable-line
const error = console.error; // eslint-disable-line

yargs.usage(`Usage: lhp
    status
    server [stop]
    request --file [filepath]
    `).demandOption([]).help('h').alias('h', 'help');

const {
  argv
} = yargs;

const isAlive = () => {
  return request({
    options: {
      hostname: '127.0.0.1',
      port: 3130,
      path: '/live'
    }
  }).then(({
    body
  }) => {
    if (body !== 'I am alive') {
      throw new Error('May be not our proxy server.');
    }
  });
};

const stopServer = () => {
  return isAlive().then(() => {
    return request({
      options: {
        hostname: '127.0.0.1',
        port: 3130,
        path: '/shutdown'
      }
    });
  });
};

const serverIndexJs = path.join(__dirname, '../index.js');
const startServer = () => {
  isAlive().then(() => {
    log('server already started.');
  }).catch(() => {
    try {
      exec(`node ${serverIndexJs} &`, {
        detached: true,
        stdio: 'ignore'
      });

      log('[log file] ~/localhosthttp.log');
    } catch(err) {
      log(`[fail] fail to start server. error message: ${err.message}`);
    }

    process.exit(0);
  });
};

const main = async () => {
  if (argv._[0] === 'status') {
    isAlive().then(() => {
      log('[normal]http proxy server run at http://127.0.0.1:3130');
    }).catch((err) => {
      log(`[error]http proxy server may down. Error msg ${err.toString()}`);
    });
  } else if (argv._[0] === 'server' && argv._[1] === 'stop') {
    stopServer();
  } else if (argv._[0] === 'server') {
    startServer();
  } else if (argv._[0] === 'request' && argv.file) {
    const file = path.resolve(process.cwd(), argv.file);
    await sendRequest(file);
  }
};

main();
